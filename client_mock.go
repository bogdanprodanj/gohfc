// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package gohfc is a generated GoMock package.
package gohfc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	orderer "github.com/hyperledger/fabric/protos/orderer"
	reflect "reflect"
)

// MockFabric is a mock of Fabric interface
type MockFabric struct {
	ctrl     *gomock.Controller
	recorder *MockFabricMockRecorder
}

// MockFabricMockRecorder is the mock recorder for MockFabric
type MockFabricMockRecorder struct {
	mock *MockFabric
}

// NewMockFabric creates a new mock instance
func NewMockFabric(ctrl *gomock.Controller) *MockFabric {
	mock := &MockFabric{ctrl: ctrl}
	mock.recorder = &MockFabricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFabric) EXPECT() *MockFabricMockRecorder {
	return m.recorder
}

// CreateUpdateChannel mocks base method
func (m *MockFabric) CreateUpdateChannel(ctx context.Context, identity Identity, path, channelId, ordererName string) error {
	ret := m.ctrl.Call(m, "CreateUpdateChannel", ctx, identity, path, channelId, ordererName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUpdateChannel indicates an expected call of CreateUpdateChannel
func (mr *MockFabricMockRecorder) CreateUpdateChannel(ctx, identity, path, channelId, ordererName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdateChannel", reflect.TypeOf((*MockFabric)(nil).CreateUpdateChannel), ctx, identity, path, channelId, ordererName)
}

// JoinChannel mocks base method
func (m *MockFabric) JoinChannel(ctx context.Context, identity Identity, channelId string, peers []string, ordererName string) ([]*PeerResponse, error) {
	ret := m.ctrl.Call(m, "JoinChannel", ctx, identity, channelId, peers, ordererName)
	ret0, _ := ret[0].([]*PeerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinChannel indicates an expected call of JoinChannel
func (mr *MockFabricMockRecorder) JoinChannel(ctx, identity, channelId, peers, ordererName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannel", reflect.TypeOf((*MockFabric)(nil).JoinChannel), ctx, identity, channelId, peers, ordererName)
}

// InstallChainCode mocks base method
func (m *MockFabric) InstallChainCode(ctx context.Context, identity Identity, req *InstallRequest, peers []string) ([]*PeerResponse, error) {
	ret := m.ctrl.Call(m, "InstallChainCode", ctx, identity, req, peers)
	ret0, _ := ret[0].([]*PeerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallChainCode indicates an expected call of InstallChainCode
func (mr *MockFabricMockRecorder) InstallChainCode(ctx, identity, req, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallChainCode", reflect.TypeOf((*MockFabric)(nil).InstallChainCode), ctx, identity, req, peers)
}

// InstantiateChainCode mocks base method
func (m *MockFabric) InstantiateChainCode(ctx context.Context, identity Identity, req *ChainCode, peers []string, ordererName, operation string, collectionsConfig []CollectionConfig) (*orderer.BroadcastResponse, error) {
	ret := m.ctrl.Call(m, "InstantiateChainCode", ctx, identity, req, peers, ordererName, operation, collectionsConfig)
	ret0, _ := ret[0].(*orderer.BroadcastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstantiateChainCode indicates an expected call of InstantiateChainCode
func (mr *MockFabricMockRecorder) InstantiateChainCode(ctx, identity, req, peers, ordererName, operation, collectionsConfig interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantiateChainCode", reflect.TypeOf((*MockFabric)(nil).InstantiateChainCode), ctx, identity, req, peers, ordererName, operation, collectionsConfig)
}

// QueryInstalledChainCodes mocks base method
func (m *MockFabric) QueryInstalledChainCodes(ctx context.Context, identity Identity, peers []string) ([]*ChainCodesResponse, error) {
	ret := m.ctrl.Call(m, "QueryInstalledChainCodes", ctx, identity, peers)
	ret0, _ := ret[0].([]*ChainCodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstalledChainCodes indicates an expected call of QueryInstalledChainCodes
func (mr *MockFabricMockRecorder) QueryInstalledChainCodes(ctx, identity, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstalledChainCodes", reflect.TypeOf((*MockFabric)(nil).QueryInstalledChainCodes), ctx, identity, peers)
}

// QueryInstantiatedChainCodes mocks base method
func (m *MockFabric) QueryInstantiatedChainCodes(ctx context.Context, identity Identity, channelId string, peers []string) ([]*ChainCodesResponse, error) {
	ret := m.ctrl.Call(m, "QueryInstantiatedChainCodes", ctx, identity, channelId, peers)
	ret0, _ := ret[0].([]*ChainCodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstantiatedChainCodes indicates an expected call of QueryInstantiatedChainCodes
func (mr *MockFabricMockRecorder) QueryInstantiatedChainCodes(ctx, identity, channelId, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstantiatedChainCodes", reflect.TypeOf((*MockFabric)(nil).QueryInstantiatedChainCodes), ctx, identity, channelId, peers)
}

// QueryChannels mocks base method
func (m *MockFabric) QueryChannels(ctx context.Context, identity Identity, peers []string) ([]*QueryChannelsResponse, error) {
	ret := m.ctrl.Call(m, "QueryChannels", ctx, identity, peers)
	ret0, _ := ret[0].([]*QueryChannelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryChannels indicates an expected call of QueryChannels
func (mr *MockFabricMockRecorder) QueryChannels(ctx, identity, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChannels", reflect.TypeOf((*MockFabric)(nil).QueryChannels), ctx, identity, peers)
}

// QueryChannelInfo mocks base method
func (m *MockFabric) QueryChannelInfo(ctx context.Context, identity Identity, channelId string, peers []string) ([]*QueryChannelInfoResponse, error) {
	ret := m.ctrl.Call(m, "QueryChannelInfo", ctx, identity, channelId, peers)
	ret0, _ := ret[0].([]*QueryChannelInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryChannelInfo indicates an expected call of QueryChannelInfo
func (mr *MockFabricMockRecorder) QueryChannelInfo(ctx, identity, channelId, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChannelInfo", reflect.TypeOf((*MockFabric)(nil).QueryChannelInfo), ctx, identity, channelId, peers)
}

// Query mocks base method
func (m *MockFabric) Query(ctx context.Context, identity Identity, chainCode ChainCode, peers []string) ([]*QueryResponse, error) {
	ret := m.ctrl.Call(m, "Query", ctx, identity, chainCode, peers)
	ret0, _ := ret[0].([]*QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockFabricMockRecorder) Query(ctx, identity, chainCode, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockFabric)(nil).Query), ctx, identity, chainCode, peers)
}

// Invoke mocks base method
func (m *MockFabric) Invoke(ctx context.Context, identity Identity, chainCode ChainCode, peers []string, ordererName string) (*InvokeResponse, error) {
	ret := m.ctrl.Call(m, "Invoke", ctx, identity, chainCode, peers, ordererName)
	ret0, _ := ret[0].(*InvokeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke
func (mr *MockFabricMockRecorder) Invoke(ctx, identity, chainCode, peers, ordererName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockFabric)(nil).Invoke), ctx, identity, chainCode, peers, ordererName)
}

// QueryTransaction mocks base method
func (m *MockFabric) QueryTransaction(ctx context.Context, identity Identity, channelId, txId string, peers []string) ([]QueryTransactionResponse, error) {
	ret := m.ctrl.Call(m, "QueryTransaction", ctx, identity, channelId, txId, peers)
	ret0, _ := ret[0].([]QueryTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTransaction indicates an expected call of QueryTransaction
func (mr *MockFabricMockRecorder) QueryTransaction(ctx, identity, channelId, txId, peers interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTransaction", reflect.TypeOf((*MockFabric)(nil).QueryTransaction), ctx, identity, channelId, txId, peers)
}

// ListenForFullBlock mocks base method
func (m *MockFabric) ListenForFullBlock(ctx context.Context, identity Identity, eventPeer, channelId string, response chan<- EventBlockResponse) error {
	ret := m.ctrl.Call(m, "ListenForFullBlock", ctx, identity, eventPeer, channelId, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenForFullBlock indicates an expected call of ListenForFullBlock
func (mr *MockFabricMockRecorder) ListenForFullBlock(ctx, identity, eventPeer, channelId, response interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForFullBlock", reflect.TypeOf((*MockFabric)(nil).ListenForFullBlock), ctx, identity, eventPeer, channelId, response)
}

// ListenForFilteredBlock mocks base method
func (m *MockFabric) ListenForFilteredBlock(ctx context.Context, identity Identity, eventPeer, channelId string, response chan<- EventBlockResponse) error {
	ret := m.ctrl.Call(m, "ListenForFilteredBlock", ctx, identity, eventPeer, channelId, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenForFilteredBlock indicates an expected call of ListenForFilteredBlock
func (mr *MockFabricMockRecorder) ListenForFilteredBlock(ctx, identity, eventPeer, channelId, response interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForFilteredBlock", reflect.TypeOf((*MockFabric)(nil).ListenForFilteredBlock), ctx, identity, eventPeer, channelId, response)
}
